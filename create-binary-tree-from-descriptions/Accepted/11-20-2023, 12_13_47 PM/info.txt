{"id":1102539903,"lang":"cpp","lang_name":"C++","time":"2 weeks, 3 days","timestamp":1700462627,"status":10,"status_display":"Accepted","runtime":"793 ms","url":"/submissions/detail/1102539903/","is_pending":"Not Pending","title":"Create Binary Tree From Descriptions","memory":"281.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // It has not been mentioned as a constraint but all node values are unique here\n    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {\n        unordered_map<int,TreeNode*> nodeOfValue;\n        set<int> notRoot; // Set to store all node values that are not the root node\n        for(auto& desc:descriptions) {\n            int p_val=desc[0],chld_val=desc[1],isLeft=desc[2];\n            notRoot.insert(chld_val); // If it is the child of some other node, it is not the root node\n            if(nodeOfValue.find(p_val)==nodeOfValue.end()) {\n                // The parent node has to be created\n                TreeNode* par=new TreeNode(p_val);\n                nodeOfValue[p_val]=par;\n            }\n            if(nodeOfValue.find(chld_val)==nodeOfValue.end()) {\n                // The child node has to created\n                TreeNode* chld=new TreeNode(chld_val);\n                nodeOfValue[chld_val]=chld;\n            }\n            // Linking discrete components\n            if(isLeft) nodeOfValue[p_val]->left=nodeOfValue[chld_val];\n            else nodeOfValue[p_val]->right=nodeOfValue[chld_val];\n        }\n        // Locating the root node\n        for(auto it:nodeOfValue) if(notRoot.find(it.first)==notRoot.end()) return it.second;\n        return nullptr;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-binary-tree-from-descriptions","has_notes":false,"flag_type":1}