{"id":949090651,"lang":"cpp","lang_name":"C++","time":"6 months, 4 weeks","timestamp":1683906780,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/949090651/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"359.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrtoBST(vector<int> nodes,int start,int end){\n        if(start>end)\n        return(NULL);\n        int mid=start+(end-start)/2;\n        TreeNode* root=new TreeNode(nodes[mid]);\n        root->left=sortedArrtoBST(nodes,start,mid-1);\n        root->right=sortedArrtoBST(nodes,mid+1,end);\n        return(root);\n    }\n    TreeNode* sortedListToBST(ListNode* head) {\n        ListNode* temp=head;\n        vector<int> nodeValues;\n        while(temp){\n            nodeValues.push_back(temp->val);\n            temp=temp->next;\n        }\n        return(sortedArrtoBST(nodeValues,0,nodeValues.size()-1));\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"flag_type":1}