{"id":1103840889,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1700616276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1103840889/","is_pending":"Not Pending","title":"Diagonal Traverse II","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {\n        vector<int> diagonalTraversal;\n        // Sum->(Row,Value) Map to store entries in the form of tuples\n        unordered_map<int,vector<pair<int,int>>> tuples;\n\n        // Elements on the same diagonal will have same index sums (row index + column index)\n        int m=mat.size();\n        for(int i=0;i<m;i++) {\n            auto row=mat[i];\n            int n=row.size();\n            // Same diagonal elements will have same index sums\n            for(int j=0;j<n;j++) tuples[i+j].emplace_back(make_pair(i,mat[i][j]));\n        }\n\n        // For the diagonals starting in the 0th column (first column)\n        for(int i=0;i<m;i++) {\n            // Here index sum will be i since column = 0\n            auto rowValPairs=tuples[i];\n            // The ordering will be done in decreasing order of rows\n            sort(rowValPairs.begin(),rowValPairs.end(),greater<pair<int,int>>());\n            for(auto& it:rowValPairs) diagonalTraversal.emplace_back(it.second);\n        }\n\n        // For the diagonals starting exclusively in the (m - 1)th row (last row)\n        int n=mat[m-1].size();\n        for(int i=1;i<n;i++) {\n            // Here index sum will be (m - 1 + i) since row = m - 1\n            auto rowValPairs=tuples[m-1+i];\n            sort(rowValPairs.begin(),rowValPairs.end(),greater<pair<int,int>>());\n            for(auto& it:rowValPairs) diagonalTraversal.emplace_back(it.second);\n        }\n\n        return diagonalTraversal;\n\n    }\n};","compare_result":"11111111111111011111100010011001000001000010000000000001","title_slug":"diagonal-traverse-ii","has_notes":false,"flag_type":1}