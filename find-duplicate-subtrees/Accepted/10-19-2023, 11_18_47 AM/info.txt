{"id":1078937809,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697694527,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1078937809/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"53.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // Function to obtain the String Representation of Tree with passed node as root\n    string hashSerialized(TreeNode* root,unordered_map<string,int>& strFreq, unordered_map<string,TreeNode*>& treeRep, vector<TreeNode*>& dup) {\n        // Delimiters need to be included to distinguish properly between left and right subtrees\n        if(!root) return \"#\";\n        string serialized=to_string(root->val)+\",\"+hashSerialized(root->left,strFreq,treeRep,dup)+\",\"+hashSerialized(root->right,strFreq,treeRep,dup);\n        if(strFreq[serialized]==1) dup.push_back(treeRep[serialized]);\n        strFreq[serialized]++;\n        treeRep[serialized]=root;\n        return serialized;\n    }\n    // Using String Representation of Tree as key for Hash Table\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n        vector<TreeNode*> dup;\n        unordered_map<string,int> strFreq;\n        unordered_map<string,TreeNode*> treeRep;\n        hashSerialized(root,strFreq,treeRep,dup);\n        return dup;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}