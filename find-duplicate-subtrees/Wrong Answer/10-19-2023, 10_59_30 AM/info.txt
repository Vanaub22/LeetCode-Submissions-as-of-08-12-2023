{"id":1078925436,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697693370,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1078925436/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // Function to obtain the String Representation of Tree with passed node as root\n    string preorderString(TreeNode* root) {\n        if(!root) return \"#\";\n        return to_string(root->val)+preorderString(root->left)+preorderString(root->right);\n    }\n    // Function to traverse the entire tree and populate the Map\n    void hashBinString(TreeNode* root, unordered_map<string,int>& strFreq, unordered_map<string,TreeNode*>& treeRep) {\n        if(!root) return; // To represent absence of nodes, i.e., Null\n        hashBinString(root->left,strFreq,treeRep);\n        string representation=preorderString(root);\n        strFreq[representation]++;\n        treeRep[representation]=root;\n        hashBinString(root->right,strFreq,treeRep);\n    }\n    // Using String Representation of Tree as key for Hash Table\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n        vector<TreeNode*> dup;\n        unordered_map<string,int> strFreq;\n        unordered_map<string,TreeNode*> treeRep;\n        hashBinString(root,strFreq,treeRep);\n        for(auto& it:strFreq) if(it.second>1) dup.push_back(treeRep[it.first]);\n        return dup;\n    }\n};","compare_result":"1111111110111111000110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}