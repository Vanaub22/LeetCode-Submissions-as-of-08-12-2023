{"id":1083852917,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1698243344,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1083852917/","is_pending":"Not Pending","title":"Binary Search Tree to Greater Sum Tree","memory":"8.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void traverse(TreeNode* root, vector<TreeNode*>& inorder, int& total) {\n        if(!root) return;\n        traverse(root->left,inorder,total);\n        inorder.push_back(root); // Pushing in actual node references\n        total+=root->val;\n        traverse(root->right,inorder,total);\n    }\n    TreeNode* bstToGst(TreeNode* root) {\n        if(!root->left && !root->right) return root;\n        vector<TreeNode*> traversal;\n        int total=0,curr=0;\n        traverse(root,traversal,total);\n        // Progressing in ascending order, subtracting prefix sum from each node value\n        for(auto node:traversal) {\n            int temp=node->val;\n            node->val=total-curr;\n            curr+=temp;\n        }\n        return root;\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"binary-search-tree-to-greater-sum-tree","has_notes":false,"flag_type":1}