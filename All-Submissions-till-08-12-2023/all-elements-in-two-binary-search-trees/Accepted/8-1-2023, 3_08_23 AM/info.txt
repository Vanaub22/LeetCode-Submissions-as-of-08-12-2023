{"id":1008869142,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1690839503,"status":10,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/1008869142/","is_pending":"Not Pending","title":"All Elements in Two Binary Search Trees","memory":"85.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode* root, vector<int>& traversal){\n        if(!root) return;\n        inorder(root->left,traversal);\n        traversal.push_back(root->val);\n        inorder(root->right,traversal);\n    }\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        vector<int> L1,L2,L;\n        inorder(root1,L1);\n        inorder(root2,L2);\n        int m=L1.size(),n=L2.size(),i=0,j=0,k=0;\n        L=vector<int>(m+n);\n        while(i<m && j<n)\n        if(L1[i]<L2[j]) L[k++]=L1[i++];\n        else L[k++]=L2[j++];\n        while(i<m) L[k++]=L1[i++];\n        while(j<n) L[k++]=L2[j++];\n        return L;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"all-elements-in-two-binary-search-trees","has_notes":false,"flag_type":1}