{"id":958180472,"lang":"cpp","lang_name":"C++","time":"6 months, 2 weeks","timestamp":1685182363,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/958180472/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> nodes;\n    void inorder(TreeNode* root){\n        if(!root)\n        return;\n        inorder(root->left);\n        nodes.push_back(root);\n        inorder(root->right);\n    }\n    TreeNode* increasingBST(TreeNode* root) {\n        inorder(root);\n        int n=nodes.size();\n        nodes[n-1]->left=nodes[n-1]->right=NULL;\n        for(int i=0;i<nodes.size()-1;i++){\n            nodes[i]->left=NULL;\n            nodes[i]->right=nodes[i+1];\n        }\n        return(nodes[0]);\n    }\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false,"flag_type":1}