{"id":1000320457,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1689958032,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1000320457/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"13.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* construct(vector<int>& preorder, int start, int end){\n        if(end<start) return nullptr;\n        TreeNode* root=new TreeNode(preorder[start]);\n        if(start==end) return root;\n        int i=start+1;\n        for(;i<=end;i++) if(preorder[i]>preorder[start]) break;\n        root->left=construct(preorder,start+1,i-1);\n        root->right=construct(preorder,i,end);\n        return root;\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n        return construct(preorder,0,preorder.size()-1);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}