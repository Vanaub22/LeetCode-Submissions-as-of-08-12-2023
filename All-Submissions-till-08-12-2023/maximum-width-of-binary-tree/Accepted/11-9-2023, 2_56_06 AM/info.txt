{"id":1094752850,"lang":"cpp","lang_name":"C++","time":"4Â weeks","timestamp":1699478766,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1094752850/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"17.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // Using Segmented Tree Concept\n    int widthOfBinaryTree(TreeNode* root) {\n        if(!root) return 0;\n        queue<pair<TreeNode*,int>> q;\n        q.push({root,0}); // Pushing in the root node\n        // Performing Level-Order Traversal\n        int maxWidth=0;\n        while(!q.empty()) {\n            int rmin=q.front().second,L=q.size(),first,last;\n            for(int i=1;i<=L;i++){\n                TreeNode* node=q.front().first;\n                int idx=q.front().second; // Segmented Index\n                q.pop();\n                if(i==1) first=idx;\n                if(i==L) last=idx;\n                // In case of Long Skewed Trees, value might Overflow\n                if(node->left) q.push({node->left,(long long)2*idx+1});\n                if(node->right) q.push({node->right,(long long)2*idx+2});\n            }\n            maxWidth=max(maxWidth,last-first+1);\n        }\n        return maxWidth;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}