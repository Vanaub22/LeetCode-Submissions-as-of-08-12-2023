{"id":1016755735,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1691598740,"status":10,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/1016755735/","is_pending":"Not Pending","title":"Linked List in Binary Tree","memory":"144.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void dfsPaths(TreeNode*& root, vector<int>& path, vector<vector<int>>& allPaths){\n        if(!root){ \n            allPaths.push_back(path);\n            return;\n        }\n        path.push_back(root->val);\n        dfsPaths(root->left,path,allPaths);\n        dfsPaths(root->right,path,allPaths);\n        path.pop_back();\n    }\n    bool hasMatchingSubArray(vector<vector<int>>& allPaths, vector<int>& subpath){\n        for(vector<int> path:allPaths)\n        if(isSubArray(path,subpath)) return true;\n        return false;\n    }\n    bool isSubArray(vector<int>& arr, vector<int> subarray){\n        int m=subarray.size(),n=arr.size();\n        if(m>n) return false;\n        for(int i=0;i<=n-m;i++){\n            bool isSub=true;\n            for(int j=0;j<m;j++)\n            if(arr[i+j]!=subarray[j]){\n                isSub=false;\n                break;\n            }\n            if(isSub) return true;\n        }\n        return false;\n    }\n    bool isSubPath(ListNode* head, TreeNode* root) {\n        vector<int> subpath,path;\n        ListNode* temp=head;\n        while(temp){\n            subpath.push_back(temp->val);\n            temp=temp->next;\n        }\n        vector<vector<int>> allPaths;\n        dfsPaths(root,path,allPaths);\n        return hasMatchingSubArray(allPaths,subpath);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"linked-list-in-binary-tree","has_notes":false,"flag_type":1}