{"id":1054871460,"lang":"c","lang_name":"C","time":"2 months, 2 weeks","timestamp":1695241567,"status":10,"status_display":"Accepted","runtime":"105 ms","url":"/submissions/detail/1054871460/","is_pending":"Not Pending","title":"Minimum Operations to Reduce X to Zero","memory":"15 MB","code":"// using the sliding window approach\nint findSum(int*,int);\nint minOperations(int* nums, int numsSize, int x){\n    // we need to find the maximum length subarray with sum = (total - x)\n    // this result would give us the minimum deletions from both ends\n    int left=0,right=0,maxLength=INT_MIN,reqdSum=findSum(nums,numsSize)-x,subArraySum=0;\n    while(right<numsSize){\n        subArraySum+=nums[right++];\n        while(subArraySum>reqdSum && left<right) subArraySum-=nums[left++];\n        if(subArraySum==reqdSum) maxLength=maxLength>right-left?maxLength:right-left;\n    }\n    return maxLength==INT_MIN?-1:numsSize-maxLength;\n}\nint findSum(int* nums, int numsSize){\n    int total=0,i;\n    for(i=0;i<numsSize;i++) total+=nums[i];\n    return total;\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-reduce-x-to-zero","has_notes":false,"flag_type":1}