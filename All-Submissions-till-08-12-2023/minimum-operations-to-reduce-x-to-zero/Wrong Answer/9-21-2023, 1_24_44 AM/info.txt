{"id":1054851809,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1695239684,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1054851809/","is_pending":"Not Pending","title":"Minimum Operations to Reduce X to Zero","memory":"N/A","code":"class Solution {\n    // using the sliding window approach\n    public int minOperations(int[] nums, int x) {\n        // we need to find the maximum length subarray with sum = (total - x)\n        // this result would give us the minimum deletions from both ends\n        int left=0,right=0,n=nums.length,reqdSum=findSum(nums,n)-x,subArraySum=0,maxLength=-1;\n        while(right<n){\n            while(left<=right && subArraySum>reqdSum) subArraySum-=nums[left++];\n            if(subArraySum==reqdSum) maxLength=Math.max(maxLength,right-left);\n            subArraySum+=nums[right++];\n        }\n        return maxLength==-1?-1:n-maxLength;\n    }\n    int findSum(int[] nums, int n) {\n        int total=0;\n        for(int i=0;i<n;i++) total+=nums[i];\n        return total;         \n    }\n}","compare_result":"1111011011101110111111111111111111111111111111111111111111111111111111111111111111111111111011","title_slug":"minimum-operations-to-reduce-x-to-zero","has_notes":false,"flag_type":1}