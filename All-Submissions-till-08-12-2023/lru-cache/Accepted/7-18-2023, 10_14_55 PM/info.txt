{"id":997740957,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1689698695,"status":10,"status_display":"Accepted","runtime":"506 ms","url":"/submissions/detail/997740957/","is_pending":"Not Pending","title":"LRU Cache","memory":"178.5 MB","code":"class LRUCache {\npublic:\n    struct Node{\n        int key,val;\n        Node *prev,*next;\n    };\n    Node *head=new Node;\n    Node *tail=new Node;\n    int capacity;\n    unordered_map<int,Node*> addressMap;\n    LRUCache(int capacity) {\n        this->capacity=capacity;\n        head->next=tail;\n        head->prev=nullptr;\n        tail->prev=head;   \n        tail->next=nullptr;\n        head->key=-1;\n        head->val=-1;\n        tail->key=-1;\n        tail->val=-1;\n    }\n    void addNode(Node* newNode){\n        Node* headNext=head->next;\n        head->next=newNode;\n        headNext->prev=newNode;\n        newNode->prev=head;\n        newNode->next=headNext; \n    }\n    void deleteNode(Node* thisNode){\n        Node* delPrev=thisNode->prev,*delNext=thisNode->next;\n        delPrev->next=delNext;\n        delNext->prev=delPrev;\n    }\n    int get(int k) {\n        if(addressMap.find(k)==addressMap.end()) return -1;\n        Node* thisNode=addressMap[k];\n        addressMap.erase(k);\n        deleteNode(thisNode);\n        addNode(thisNode);\n        addressMap[k]=head->next;\n        return addressMap[k]->val;\n    }\n    void put(int k, int v) {\n        if(addressMap.find(k)!=addressMap.end()){\n            Node* thisNode=addressMap[k];\n            addressMap.erase(k);\n            deleteNode(thisNode);\n        }\n        if(addressMap.size()==capacity){\n            addressMap.erase(tail->prev->key);\n            deleteNode(tail->prev);\n        }\n        Node* newNode=new Node;\n        newNode->key=k,newNode->val=v;\n        addNode(newNode);\n        addressMap[head->next->key]=head->next;        \n    }\n};\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}