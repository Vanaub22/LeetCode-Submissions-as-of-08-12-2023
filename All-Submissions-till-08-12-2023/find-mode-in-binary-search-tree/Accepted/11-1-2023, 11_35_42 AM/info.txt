{"id":1088896929,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1698818742,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1088896929/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"44.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    static void traversal(TreeNode root,Map<Integer,Integer> freq) {\n        if(root==null) return;\n        if(freq.containsKey(root.val)) freq.put(root.val,freq.get(root.val)+1);\n        else freq.put(root.val,1);\n        traversal(root.left,freq);\n        traversal(root.right,freq);\n    }\n    public int[] findMode(TreeNode root) {\n        Map<Integer,Integer> freq=new HashMap<>();\n        traversal(root,freq);\n        ArrayList<Integer> modeList=new ArrayList<>();\n        int maxFreq=-1;\n        for(int x:freq.keySet()) {\n            if(freq.get(x)>=maxFreq) {\n                if(freq.get(x)>maxFreq) {\n                    modeList.clear();\n                    maxFreq=freq.get(x);\n                }\n                modeList.add(x);\n            }\n        }\n        int idx=0,modes[]=new int[modeList.size()];\n        for(int i:modeList) modes[idx++]=i;\n        return modes;\n    }\n}","compare_result":"11111111111111111111111","title_slug":"find-mode-in-binary-search-tree","has_notes":false,"flag_type":1}