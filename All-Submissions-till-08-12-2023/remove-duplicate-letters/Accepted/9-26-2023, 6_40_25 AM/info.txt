{"id":1059247221,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1695690625,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1059247221/","is_pending":"Not Pending","title":"Remove Duplicate Letters","memory":"7.4 MB","code":"class Solution {\npublic:\n    // Using Stack and Greedy Approach\n    string removeDuplicateLetters(string s) {\n        unordered_map<char,int> freq;\n        unordered_map<char,bool> visited;\n        stack<int> stk; // to store indices\n        string res=\"\";\n        int n=s.size();\n        for(char c:s) freq[c]++;\n        for(int i=0;i<n;i++){\n            freq[s[i]]--; // decrementing frequency to keep a track of how many are left\n            if(visited[s[i]]) continue; // already visited, no need to consider\n            // remove stack top element indices if lexicographical order is affected\n            while(!stk.empty() && s[stk.top()]>s[i] && freq[s[stk.top()]]>0){\n                visited[s[stk.top()]]=false;\n                stk.pop();\n            }\n            stk.push(i); // add current character index to the stack\n            visited[s[i]]=true;\n        }\n        // create the resultant string\n        while(!stk.empty()){\n            res+=s[stk.top()];\n            stk.pop();\n        }\n        reverse(res.begin(),res.end());\n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicate-letters","has_notes":false,"flag_type":1}