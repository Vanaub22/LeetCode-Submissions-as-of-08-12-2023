{"id":952685227,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1684410704,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/952685227/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"17.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        if(!root)\n        return(root);\n        queue<Node*> Q;\n        Q.push(root);\n        while(!Q.empty()){\n            vector<Node*> level;\n            int n=Q.size();\n            for(int i=1;i<=n;i++){\n                if(Q.front()->left)\n                Q.push(Q.front()->left);\n                if(Q.front()->right)\n                Q.push(Q.front()->right);\n                level.push_back(Q.front());\n                Q.pop();\n            }\n            for(int i=1;i<n;i++)\n            level[i-1]->next=level[i];\n        }\n        return(root);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node","has_notes":false,"flag_type":1}