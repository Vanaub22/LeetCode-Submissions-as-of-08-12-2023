{"id":1085176261,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1698389276,"status":10,"status_display":"Accepted","runtime":"97 ms","url":"/submissions/detail/1085176261/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"8.4 MB","code":"class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n=s.length(),palindromeStart=0,palindromeEnd=0;\n        // Caching / Memoizing intermediate results in a 2-D DP Array for O(1) checks\n        bool memo[n][n]; \n        memset(memo,false,sizeof(memo));\n        // Every single letter word is a Palindrome\n        // Every two-letter word having the same letter is a Palindrome as well\n        for(int i=0;i<n-1;i++) { \n            memo[i][i]=true;\n            if(s[i]==s[i+1]) {\n                memo[i][i+1]=true;\n                palindromeStart=i,palindromeEnd=i+1;\n            }\n        }\n        memo[n-1][n-1]=true;\n        // To find palindromes having length greater than 2, i.e., diff>=2\n        for(int diff=2;diff<n;diff++) for(int start=0;start<n-diff+1;start++) {\n            if(s[start]==s[start+diff] && memo[start+1][start+diff-1]) {\n                memo[start][start+diff]=true;\n                palindromeStart=start;\n                palindromeEnd=start+diff;\n            }\n        }\n        return s.substr(palindromeStart,palindromeEnd-palindromeStart+1); \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1}