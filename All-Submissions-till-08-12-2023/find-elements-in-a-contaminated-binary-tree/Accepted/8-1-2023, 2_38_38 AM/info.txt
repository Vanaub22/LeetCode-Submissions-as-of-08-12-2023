{"id":1008855885,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1690837718,"status":10,"status_display":"Accepted","runtime":"312 ms","url":"/submissions/detail/1008855885/","is_pending":"Not Pending","title":"Find Elements in a Contaminated Binary Tree","memory":"19.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass FindElements {\npublic:\n    TreeNode* newRoot;\n    FindElements(TreeNode* root){\n        recover(root,0);\n        newRoot=root;\n    }\n    bool find(int target){\n        return dfs(newRoot,target);\n    }\n    bool dfs(TreeNode* root, int target){\n        if(!root) return false;\n        else if(root->val==target) return true;\n        else return dfs(root->left,target) || dfs(root->right,target);\n    }\n    void recover(TreeNode* node, int x){\n        if(!node) return;\n        node->val=x;\n        recover(node->left,2*x+1);\n        recover(node->right,2*x+2);        \n    }\n};\n/**\n * Your FindElements object will be instantiated and called as such:\n * FindElements* obj = new FindElements(root);\n * bool param_1 = obj->find(target);\n */","compare_result":"1111111111111111111111111111111","title_slug":"find-elements-in-a-contaminated-binary-tree","has_notes":false,"flag_type":1}