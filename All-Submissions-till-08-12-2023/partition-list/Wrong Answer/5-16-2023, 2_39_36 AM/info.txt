{"id":951045284,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1684184976,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/951045284/","is_pending":"Not Pending","title":"Partition List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n        if(!head||!head->next)\n        return(head);\n        vector<int> nodeValues,partitioned;\n        ListNode *temp=head;\n        bool flag=false;\n        int i=0,pivot_index=0,pos,f=0;\n        while(temp){\n            nodeValues.push_back(temp->val);\n            if(temp->val==x){\n                f++;\n                if(!flag){\n                    pivot_index=i;\n                    flag=true;\n                }\n            }\n            temp=temp->next;\n            i++;\n        }\n        if(f==nodeValues.size())\n        return(head);\n        //lesser before\n        for(int i=0;i<pivot_index;i++)\n        if(nodeValues[i]<x)\n        partitioned.push_back(nodeValues[i]);\n        //lesser after\n        for(int i=pivot_index;i<nodeValues.size();i++)\n        if(nodeValues[i]<x)\n        partitioned.push_back(nodeValues[i]);\n        //greater before\n        for(int i=0;i<pivot_index;i++)\n        if(nodeValues[i]>x)\n        partitioned.push_back(nodeValues[i]);\n        //multiple pivots\n        i=pivot_index;\n        while(i<nodeValues.size() && nodeValues[i++]==x)\n        partitioned.push_back(x);\n        //greater after\n        for(int i=pivot_index;i<nodeValues.size();i++)\n        if(nodeValues[i]>x)\n        partitioned.push_back(nodeValues[i]);\n        nodeValues=partitioned;\n        partitioned.clear();\n        i=0;\n        temp=head;\n        while(temp){\n            temp->val=nodeValues[i++];\n            temp=temp->next;\n        }\n        return(head);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111110110000011101101111100011111111101101101001101101110111100111011011110101010111011111111011111111111111111","title_slug":"partition-list","has_notes":false,"flag_type":1}