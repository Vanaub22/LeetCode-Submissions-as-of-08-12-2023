{"id":1001042716,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1690039097,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1001042716/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"N/A","code":"class NumArray {\npublic:\n    vector<vector<int>> dp;\n    NumArray(vector<int>& nums) {\n        int n=nums.size();\n        dp=vector<vector<int>>(n,vector<int>(n,INT_MIN));\n        for(int i=0;i<n;i++)\n        for(int j=0;j<n;j++)\n        if(i==j) dp[i][j]=nums[i];\n        else if(i<j) dp[i][j]=dp[i][j-1]+nums[j];\n    }\n    void update(int index, int val) {\n        int n=dp[0].size(),change=val-dp[index][index];\n        for(int i=0;i<=index;i++)\n        for(int j=index;j<n;j++)\n        dp[i][j]+=change;\n    }\n    int sumRange(int left, int right) {\n        return dp[left][right];\n    }\n};\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * obj->update(index,val);\n * int param_2 = obj->sumRange(left,right);\n */","compare_result":"1111111100000000","title_slug":"range-sum-query-mutable","has_notes":false,"flag_type":1}