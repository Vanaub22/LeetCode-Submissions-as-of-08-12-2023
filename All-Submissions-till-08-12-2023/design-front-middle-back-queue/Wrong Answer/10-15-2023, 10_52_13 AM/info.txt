{"id":1075599045,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1697347333,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1075599045/","is_pending":"Not Pending","title":"Design Front Middle Back Queue","memory":"N/A","code":"class FrontMiddleBackQueue {\npublic:\n    deque<int> dq_first,dq_second;\n    // For every Push Operation, I have checked and made the length as equal as possible for the 2 Dequeues (Maximum Permissible Size Difference = 1)\n    void pushFront(int val) {\n        dq_first.push_front(val);\n        if(dq_first.size()-dq_second.size()>1) {\n            int popped=dq_first.back();\n            dq_first.pop_back();\n            dq_second.push_front(popped);\n        }\n    }\n    \n    void pushMiddle(int val) {\n        if(dq_first.size()<=dq_second.size()) dq_first.push_back(val);\n        else dq_second.push_front(val);\n    }\n    \n    void pushBack(int val) {\n        dq_second.push_back(val);\n        if(dq_second.size()-dq_first.size()>1) {\n            int popped=dq_second.front();\n            dq_second.pop_front();\n            dq_first.push_back(popped);\n        }\n    }\n    \n    int popFront() {\n        int popped;\n        if(!dq_first.empty()) {\n            popped=dq_first.front();\n            dq_first.pop_front();\n            return popped;\n        }\n        else if(!dq_second.empty()) {\n            popped=dq_second.front();\n            dq_second.pop_front();\n            return popped;\n        }\n        else return -1;\n    }\n    \n    int popMiddle() {\n        int popped;\n        if(!dq_first.empty()) {\n            popped=dq_first.back();\n            dq_first.pop_back();\n            return popped;\n        }\n        else if(!dq_second.empty()) {\n            popped=dq_second.front();\n            dq_second.pop_front();\n            return popped;\n        }\n        else return -1;\n    }\n    \n    int popBack() {\n        int popped;\n        if(!dq_second.empty()) {\n            popped=dq_second.back();\n            dq_second.pop_back();\n            return popped;\n        }\n        else if(!dq_first.empty()) {\n            popped=dq_first.back();\n            dq_first.pop_back();\n            return popped;\n        }\n        else return -1;\n    }\n};\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue* obj = new FrontMiddleBackQueue();\n * obj->pushFront(val);\n * obj->pushMiddle(val);\n * obj->pushBack(val);\n * int param_4 = obj->popFront();\n * int param_5 = obj->popMiddle();\n * int param_6 = obj->popBack();\n */","compare_result":"11011111110001001001000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"design-front-middle-back-queue","has_notes":false,"flag_type":1}