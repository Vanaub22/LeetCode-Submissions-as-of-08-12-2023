{"id":1089979843,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1698941200,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1089979843/","is_pending":"Not Pending","title":"Subdomain Visit Count","memory":"13.7 MB","code":"class Solution {\npublic:\n    // Helper function to find all the associated subdomains for a domain\n    vector<string> findAllSubdomains(string cpdomain) {\n        int n=cpdomain.length();\n        string subdomain;\n        vector<string> subdomains;\n        for(int i=n-1;i>=0;i--) {\n            if(cpdomain[i]=='.' || cpdomain[i]==' ') {\n                string sd=subdomain; // Temporary assignment for reversal\n                reverse(sd.begin(),sd.end()); // Iteration is in Reverse\n                subdomains.emplace_back(sd);\n                if(cpdomain[i]==' ') break;\n            }\n            subdomain+=cpdomain[i];\n        }\n        return subdomains;\n    }\n    vector<string> subdomainVisits(vector<string>& cpdomains) {\n        unordered_map<string,int> domainVisits; // Storing individual domain visits\n        for(string cpdomain:cpdomains) {\n            // Finding all subdomains using Helper function\n            vector<string> subdomains=findAllSubdomains(cpdomain);\n            // Finding the number of visits\n            int visits=0;\n            for(char c:cpdomain) if(c==' ') break;\n            else visits=(visits*10)+c-'0';\n            for(string subdomain:subdomains) domainVisits[subdomain]+=visits;\n        }\n        vector<string> allVisits;\n        for(auto it:domainVisits) \n        allVisits.emplace_back(to_string(it.second)+\" \"+it.first);\n        return allVisits;\n\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"subdomain-visit-count","has_notes":false,"flag_type":1}