{"id":944833589,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1683274187,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/944833589/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"12.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n//using a queue to store levels - BFS\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> traversal;\n        if(!root)\n        return(traversal);\n        queue<TreeNode*> Q;\n        Q.push(root);\n        while(!Q.empty()){\n            vector<int> level;\n            int n=Q.size();\n            for(int i=1;i<=n;i++){\n                if(Q.front()->left)\n                Q.push(Q.front()->left);\n                if(Q.front()->right)\n                Q.push(Q.front()->right);\n                level.push_back(Q.front()->val);\n                Q.pop();\n            }\n            traversal.push_back(level);\n            level.clear();\n        }\n        return(traversal);\n    }\n};","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}