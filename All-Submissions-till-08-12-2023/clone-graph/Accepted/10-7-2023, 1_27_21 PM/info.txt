{"id":1069179047,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1696665441,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1069179047/","is_pending":"Not Pending","title":"Clone Graph","memory":"9.3 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    unordered_map<Node*,Node*> nodeMapping;\n    Node* cloneGraph(Node* node) {\n        if(!node) return node;\n        if(nodeMapping.find(node)!=nodeMapping.end()) return nodeMapping[node];\n        Node* cloned_node=new Node(node->val);\n        nodeMapping[node]=cloned_node;\n        for(Node* neighbour:node->neighbors)\n        cloned_node->neighbors.emplace_back(cloneGraph(neighbour));\n        return cloned_node;\n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false,"flag_type":1}