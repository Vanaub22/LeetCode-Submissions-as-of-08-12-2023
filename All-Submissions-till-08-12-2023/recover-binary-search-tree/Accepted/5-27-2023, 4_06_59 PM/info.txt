{"id":958191689,"lang":"cpp","lang_name":"C++","time":"6 months, 2 weeks","timestamp":1685183819,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/958191689/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"58.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> traversal;\n    void inorder(TreeNode* root){\n        if(!root)\n        return;\n        inorder(root->left);\n        traversal.push_back(root);\n        inorder(root->right);\n    }\n    void recoverTree(TreeNode* root) {\n        inorder(root);\n        int f=-1,b=-1;\n        for(int i=0;i<traversal.size()-1;i++){\n            if(traversal[i]->val>traversal[i+1]->val)\n            if(f==-1)\n            f=i;\n            else\n            b=i;\n        }\n        if(f==-1 && b!=-1)\n        swap(traversal[b]->val,traversal[b+1]->val);\n        if(f!=-1 && b==-1)\n        swap(traversal[f]->val,traversal[f+1]->val);\n        if(f!=-1 && b!=-1)\n        swap(traversal[f]->val,traversal[b+1]->val);\n    }\n};","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false,"flag_type":1}