{"id":951078815,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1684191273,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/951078815/","is_pending":"Not Pending","title":"Sort the Jumbled Numbers","memory":"N/A","code":"class Solution {\npublic:\n    struct map_value{\n        int mpVal,originalVal,index;\n    };\n    int mapped_value(int x, vector<int>& mapping){\n        int value=0,i=0;\n        while(x>0){\n            value+=(pow(10,i)*mapping[x%10]);\n            x/=10;\n            i++;\n        }\n        return(value);\n    }\n    static bool comp(map_value a, map_value b){\n        return(a.mpVal==b.mpVal?a.index<b.index:a.mpVal<b.mpVal);\n    }\n    vector<int> sortJumbled(vector<int>& mapping, vector<int>& nums) {\n        vector<map_value> M(nums.size());\n        for(int i=0;i<nums.size();i++){\n            M[i].mpVal=mapped_value(nums[i],mapping);\n            M[i].originalVal=nums[i];\n            M[i].index=i;\n        }       \n        sort(M.begin(),M.end(),comp);\n        for(int i=0;i<nums.size();i++)\n        nums[i]=M[i].originalVal;\n        return(nums);\n    }\n};","compare_result":"111111001111111111111111111111111111111111111111111111111111111111","title_slug":"sort-the-jumbled-numbers","has_notes":false,"flag_type":1}