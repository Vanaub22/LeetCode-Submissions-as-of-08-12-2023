{"id":1020559976,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1691960798,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1020559976/","is_pending":"Not Pending","title":"Recover a Tree From Preorder Traversal","memory":"19.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* recoverFromPreorder(string traversal) {\n        unordered_map<int,TreeNode*> nodeAtDepth;\n        int i=0,n=traversal.size();\n        while(i<n){\n            int depth=0;\n            string val=\"\";\n            while(i<n && traversal[i]=='-'){\n                i++;\n                depth++;\n            }\n            while(i<n && isdigit(traversal[i])){\n                val+=traversal[i];\n                i++;\n            }\n            TreeNode* newNode=new TreeNode(stoi(val));\n            if(depth>0){\n                if(!nodeAtDepth[depth-1]->left) nodeAtDepth[depth-1]->left=newNode;\n                else nodeAtDepth[depth-1]->right=newNode;\n            }\n            nodeAtDepth[depth]=newNode;\n        }\n        return nodeAtDepth[0];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"recover-a-tree-from-preorder-traversal","has_notes":false,"flag_type":1}