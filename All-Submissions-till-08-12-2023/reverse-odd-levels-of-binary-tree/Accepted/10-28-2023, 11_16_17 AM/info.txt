{"id":1085825644,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1698471977,"status":10,"status_display":"Accepted","runtime":"155 ms","url":"/submissions/detail/1085825644/","is_pending":"Not Pending","title":"Reverse Odd Levels of Binary Tree","memory":"76.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* reverseOddLevels(TreeNode* root) {\n        if(!root->left && !root->right) return root;\n        queue<TreeNode*> q;\n        int level=0;\n        // Performing Level-Order Traversal\n        q.push(root);\n        while(!q.empty()) {\n            vector<TreeNode*> oddLevel;\n            int n=q.size();\n            for(int i=1;i<=n;i++) {\n                TreeNode* node=q.front();\n                if(level%2!=0) oddLevel.emplace_back(node);\n                q.pop();\n                if(node->left) q.push(node->left);\n                if(node->right) q.push(node->right);\n            }\n            // For odd levels, simply reversing the node values by swapping\n            if(level%2!=0) {\n                int m=oddLevel.size();\n                for(int i=0;i<m/2;i++) swap(oddLevel[i]->val,oddLevel[m-i-1]->val);\n            }\n            level++;\n        }\n        return root;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-odd-levels-of-binary-tree","has_notes":false,"flag_type":1}