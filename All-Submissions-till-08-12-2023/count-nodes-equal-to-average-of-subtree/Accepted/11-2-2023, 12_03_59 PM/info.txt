{"id":1089690179,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1698906839,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1089690179/","is_pending":"Not Pending","title":"Count Nodes Equal to Average of Subtree","memory":"12.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // To calculate the subtree average of nodes\n    int findAvgInSubtree(TreeNode* root) {\n        if(!root) return 0;\n        int sum_subtree=0,count_subtree=0;\n        calcSubtree(root,count_subtree,sum_subtree);\n        return sum_subtree/count_subtree;\n    }\n    // To count the number of nodes and sum of node values in the subtree\n    void calcSubtree(TreeNode* root, int& node_count, int& node_sum) {\n        if(!root) return;\n        node_sum+=root->val;\n        node_count+=1;\n        calcSubtree(root->left,node_count,node_sum);\n        calcSubtree(root->right,node_count,node_sum);\n    }\n    // To check for each node and find the count\n    void checkSubtreeAvg(TreeNode* root, int& count) {\n        if(!root) return;\n        if(root->val==findAvgInSubtree(root)) count++;\n        checkSubtreeAvg(root->left,count);\n        checkSubtreeAvg(root->right,count);\n    }\n    int averageOfSubtree(TreeNode* root) {\n        int count=0;\n        checkSubtreeAvg(root,count);\n        return count;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-nodes-equal-to-average-of-subtree","has_notes":false,"flag_type":1}