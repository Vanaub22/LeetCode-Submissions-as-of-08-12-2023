{"id":975049204,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1687205646,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/975049204/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"13.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void findParentandDepth(unordered_map<int,pair<int,int>>& mp, TreeNode* root, int depth, int parent){\n        if(!root)\n        return;\n        mp[root->val]={parent,depth};\n        findParentandDepth(mp,root->left,depth+1,root->val);\n        findParentandDepth(mp,root->right,depth+1,root->val);\n    }\n    bool isCousins(TreeNode* root, int x, int y) {\n        unordered_map<int,pair<int,int>> mp;\n        findParentandDepth(mp,root,0,-1);\n        return(mp[x].first==mp[y].first?false:mp[x].second==mp[y].second);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cousins-in-binary-tree","has_notes":false,"flag_type":1}