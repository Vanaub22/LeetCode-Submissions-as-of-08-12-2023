{"id":1086266210,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1698517583,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/1086266210/","is_pending":"Not Pending","title":"Degree of an Array","memory":"25.2 MB","code":"class Solution {\npublic:\n    int findShortestSubArray(vector<int>& nums) {\n        unordered_map<int,int> freq;\n        for(int i:nums) freq[i]++;\n        int maxFreq=-1;\n        vector<int> modes;\n        for(auto& it:freq) { \n            if(it.second>maxFreq) {\n                maxFreq=it.second;\n                modes.clear();\n                modes.push_back(it.first);\n            }\n            else if(it.second==maxFreq) {\n                modes.push_back(it.first);\n            }\n        }\n        int shortestSubLength=nums.size();\n        for(int mode:modes) {\n            int subarrayLength=findLastOccurrence(nums,mode)-(find(nums.begin(),nums.end(),mode)-nums.begin())+1;\n            if(subarrayLength<shortestSubLength) shortestSubLength=subarrayLength;\n        }\n        return shortestSubLength;\n    }\n    int findLastOccurrence(vector<int>& nums, int x) {\n        int i=nums.size()-1;\n        for(;i>=0;i--) if(nums[i]==x) return i;\n        return 0;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array","has_notes":false,"flag_type":1}