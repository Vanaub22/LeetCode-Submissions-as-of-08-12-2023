{"id":1042553291,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1694041730,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1042553291/","is_pending":"Not Pending","title":"Split Linked List in Parts","memory":"8.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<ListNode*> splitListToParts(ListNode* head, int k) {\n        vector<ListNode*> partitions;\n        ListNode* temp=head;\n        int n=0;\n        while(temp){\n            n++;\n            temp=temp->next;\n        }\n        int big_groups=n%k;\n        temp=head;\n        for(int i=0;i<k;i++){\n            int size=big_groups?n/k+1:n/k;\n            ListNode* partition_head=nullptr,*partition_tail=nullptr;\n            for(int j=0;j<size;j++){\n                if(!partition_head) partition_head=partition_tail=temp;\n                else{\n                    partition_tail->next=temp;\n                    partition_tail=partition_tail->next;\n                }\n                if(temp) temp=temp->next;\n            }\n            if(partition_tail) partition_tail->next=nullptr;\n            partitions.push_back(partition_head);\n            if(big_groups>0) big_groups--;\n        }\n        return partitions;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"split-linked-list-in-parts","has_notes":false,"flag_type":1}