{"id":1077857180,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697575011,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1077857180/","is_pending":"Not Pending","title":"Binary Tree Coloring Game","memory":"10.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // To find the number of nodes assuming the passed node as the root node\n    int countNodesFromRoot(TreeNode* root) {\n        if(!root) return 0;\n        return 1+countNodesFromRoot(root->left)+countNodesFromRoot(root->right);\n    }\n    // To find and return a node in the tree with same value as the passed value \n    TreeNode* findNodeWithValue(TreeNode* root, int x) {\n        if(!root || root->val==x) return root;\n        TreeNode* search=findNodeWithValue(root->left,x);\n        if(search) return search;\n        return findNodeWithValue(root->right,x);\n    }\n    // To determine if winning is possible for the 2nd Player\n    bool btreeGameWinningMove(TreeNode* root, int n, int x) {\n        TreeNode* xnode=findNodeWithValue(root,x);\n        int leftCount=countNodesFromRoot(xnode->left),rightCount=countNodesFromRoot(xnode->right);\n        // There are 3 cases in which the 2nd player can Win:\n        // 1. There are less than n/2 nodes left in that Subtree => Choose Parent Node\n        // 2. The Left Subtree of xnode has more than n/2 nodes => Choose Left Child\n        // 3. The Right Subtree of xnode has more than n/2 nodes => Choose Right Child \n        return leftCount+rightCount<n/2 || leftCount>n/2 || rightCount>n/2;        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-coloring-game","has_notes":false,"flag_type":1}