{"id":1078666176,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697661155,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1078666176/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"24.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        // Base Case\n        if(!root) return nullptr;\n        // If value is in Range => Go both sides to check\n        else if(root->val>=low && root->val<=high) {\n            root->left=trimBST(root->left,low,high);\n            root->right=trimBST(root->right,low,high);\n            return root;\n        }\n        // If value is Lesser => Trim the Left Side because their values will be even smaller\n        // If value is Greater => Trim the Right Side because their values will be even Greater\n        return root->val<low?trimBST(root->right,low,high):trimBST(root->left,low,high);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trim-a-binary-search-tree","has_notes":false,"flag_type":1}