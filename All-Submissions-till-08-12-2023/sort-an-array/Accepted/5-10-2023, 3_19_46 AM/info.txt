{"id":947491945,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1683668986,"status":10,"status_display":"Accepted","runtime":"1238 ms","url":"/submissions/detail/947491945/","is_pending":"Not Pending","title":"Sort an Array","memory":"289.2 MB","code":"class Solution {\npublic:\n    void merging(vector<int>& arr,int low,int mid,int high){\n        int left=low,right=mid+1;\n        vector<int> temp;\n        while(left<=mid && right<=high){\n            if(arr[left]<=arr[right])\n            temp.push_back(arr[left++]);\n            else\n            temp.push_back(arr[right++]);\n        }\n        while(left<=mid)\n        temp.push_back(arr[left++]);\n        while(right<=high)\n        temp.push_back(arr[right++]);\n        for(int i=low;i<=high;i++)\n        arr[i]=temp[i-low];\n    }\n    void mergeSort(vector<int>& arr,int low,int high){\n        if(low>=high)\n        return;\n        int mid=low+(high-low)/2;\n        mergeSort(arr,low,mid);\n        mergeSort(arr,mid+1,high);\n        merging(arr,low,mid,high);\n    }\n    vector<int> sortArray(vector<int>& nums) {\n        mergeSort(nums,0,nums.size()-1);\n        return(nums);\n    }\n};","compare_result":"11111111111111111111","title_slug":"sort-an-array","has_notes":false,"flag_type":1}