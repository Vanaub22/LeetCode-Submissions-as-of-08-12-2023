{"id":1084389225,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1698300905,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1084389225/","is_pending":"Not Pending","title":"Sort the Matrix Diagonally","memory":"9.8 MB","code":"class Solution {\npublic:\n    void sortDiagonal(int row, int col, int m, int n, vector<vector<int>>& mat) {\n        int i=row,j=col,k=0,L;\n        vector<int> diag;\n        // Collecting and sorting diagonal elements\n        while(i<m && j<n) diag.push_back(mat[i++][j++]);\n        sort(diag.begin(),diag.end());\n        i=row,j=col,L=diag.size();\n        // Putting them back to their positions\n        while(i<m && j<n && k<L) mat[i++][j++]=diag[k++];\n    }\n    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {\n        int m=mat.size(),n=mat[0].size();\n        // Sorting diagonals starting in the 0th column\n        for(int i=0;i<m;i++) sortDiagonal(i,0,m,n,mat);\n        // Sorting diagonals starting in the 0th row (exclusively)\n        for(int i=1;i<n;i++) sortDiagonal(0,i,m,n,mat);\n        return mat;\n    }\n};","compare_result":"111111111111111","title_slug":"sort-the-matrix-diagonally","has_notes":false,"flag_type":5}