{"id":1026577479,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1692522879,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1026577479/","is_pending":"Not Pending","title":"Print Binary Tree","memory":"8.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findHeight(TreeNode* root){\n        return root?1+max(findHeight(root->left),findHeight(root->right)):0;\n    }\n    void dfs_solve(TreeNode* root, int row, int col, int height, vector<vector<string>>& res){\n        if(!root) return;\n        res[row][col]=to_string(root->val);\n        dfs_solve(root->left,row+1,col-pow(2,height-row-2),height,res);\n        dfs_solve(root->right,row+1,col+pow(2,height-row-2),height,res);\n    }\n    vector<vector<string>> printTree(TreeNode* root) {\n        int h=findHeight(root),n=pow(2,h)-1;\n        vector<vector<string>> res(h,vector<string>(n,\"\"));\n        dfs_solve(root,0,(n-1)/2,h,res);\n        return res;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"print-binary-tree","has_notes":false,"flag_type":1}