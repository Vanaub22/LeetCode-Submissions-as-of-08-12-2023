{"id":1079742669,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697784036,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1079742669/","is_pending":"Not Pending","title":"Beautiful Arrangement","memory":"N/A","code":"class Solution {\npublic:\n    // All the solutions need to be discovered, therefore, Backtracking would be preferred\n    int permuteBacktrack(int pos,bool considered[], int& solutions, int n) {\n        if(pos>n) solutions++; // Another solution has been obtained\n        for(int i=1;i<=n;i++) {\n            if(!considered[i] && (pos%i==0 || i%pos==0)) considered[i]=true;\n            permuteBacktrack(pos+1,considered,solutions,n);\n            considered[i]=false;\n        }\n        return solutions;\n    }\n    int countArrangement(int n) {\n        if(n<4) return n;\n        int solutions=0;\n        bool considered[n+1]; // 1-indexed, to keep a track of integers that have been considered\n        memset(considered,false,sizeof(considered)); // setting false to positions\n        return permuteBacktrack(1,considered,solutions,n);\n    }\n};","compare_result":"111000000000000","title_slug":"beautiful-arrangement","has_notes":false,"flag_type":1}