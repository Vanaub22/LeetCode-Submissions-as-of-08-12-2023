{"id":1069162580,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1696663406,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1069162580/","is_pending":"Not Pending","title":"Is Graph Bipartite?","memory":"13.9 MB","code":"class Solution {\nprivate:\n    bool dfs_colour_check(int start, vector<vector<int>>& graph, int colour, int colours[]) {\n        colours[start]=colour;\n        // paint all the unpainted neighbours with a different colour\n        // if any of the neighbours have the same colour, the graph is not a Bipartite Graph\n        for(int neighbour:graph[start])\n        if(colours[neighbour]==-1) { \n            if(!dfs_colour_check(neighbour,graph,!colour,colours)) return false;\n        }\n        else if(colours[neighbour]==colour) return false;\n        return true;\n    }\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        // Graph may not be connected, i.e. multiple components may exist\n        int V=graph.size(),colours[V];\n        fill(colours,colours+V,-1); // -1 => not coloured (I have two colours 0 and 1)\n        for(int i=0;i<V;i++) {\n            if(colours[i]==-1) {\n                if(!dfs_colour_check(i,graph,0,colours)) return false;\n            }\n        }\n        return true;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"is-graph-bipartite","has_notes":false,"flag_type":1}