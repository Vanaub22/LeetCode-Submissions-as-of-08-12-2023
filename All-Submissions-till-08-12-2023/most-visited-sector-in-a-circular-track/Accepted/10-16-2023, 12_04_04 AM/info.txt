{"id":1076088378,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1697394844,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1076088378/","is_pending":"Not Pending","title":"Most Visited Sector in  a Circular Track","memory":"12.2 MB","code":"class Solution {\npublic:\n    vector<int> mostVisited(int n, vector<int>& rounds) {\n        vector<int> mostVisitedSectors;\n        unordered_map<int,int> sector_visits;\n        int m=rounds.size();\n        for(int i=1;i<m;i++) {\n            int start=rounds[i-1],end=rounds[i];\n            if(start<=end) for(int sector=start;sector<end;sector++) sector_visits[sector]++;\n            else {\n                for(int sector=1;sector<end;sector++) sector_visits[sector]++;\n                for(int sector=start;sector<=n;sector++) sector_visits[sector]++;\n            }\n        }\n        sector_visits[rounds[m-1]]++; // Handling the Last Sector, i.e., the end of all rounds\n        int maxVisit=0;\n        for(int i=1;i<=n;i++) {\n            if(sector_visits[i]==maxVisit) mostVisitedSectors.emplace_back(i);\n            else if(sector_visits[i]>maxVisit) { // Reset Condition\n               mostVisitedSectors={i}; \n               maxVisit=sector_visits[i]; \n            }\n        }\n        return mostVisitedSectors;\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"most-visited-sector-in-a-circular-track","has_notes":false,"flag_type":1}