{"id":1016705689,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1691595152,"status":10,"status_display":"Accepted","runtime":"109 ms","url":"/submissions/detail/1016705689/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"9.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n        if(!head || !head->next) return head;\n        ListNode* temp=head;\n        int n=0,i=0;\n        vector<int> lst;\n        while(temp){\n            n++;\n            lst.push_back(temp->val);\n            temp=temp->next;\n        }\n        while(++i<n){\n            int temp=lst[i],j=i;\n            while(--j>=0) if(lst[j]>temp) lst[j+1]=lst[j];\n            else break;\n            lst[j+1]=temp;\n        }\n        i=0;\n        temp=head;\n        while(temp){\n            temp->val=lst[i];\n            i++;\n            temp=temp->next;\n        }\n        return head;\n    }\n};","compare_result":"1111111111111111111","title_slug":"insertion-sort-list","has_notes":false,"flag_type":1}