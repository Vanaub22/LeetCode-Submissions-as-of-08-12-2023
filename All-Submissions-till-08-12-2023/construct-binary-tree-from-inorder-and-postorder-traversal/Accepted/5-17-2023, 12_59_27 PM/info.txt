{"id":951922197,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1684308567,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/951922197/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"26.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& inorder,vector<int>& postorder) {\n        map<int,int> inMap;\n        for(int i=0;i<inorder.size();i++)\n        inMap[inorder[i]]=i;\n        return(recBuildTree(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,inMap));\n    }\n    TreeNode* recBuildTree(vector<int>& inorder,int inStart,int inEnd,vector<int>& postorder,int postStart,int postEnd,map<int,int>& inMap){\n        if(inStart>inEnd||postStart>postEnd)\n        return(NULL);\n        TreeNode* root=new TreeNode(postorder[postEnd]);\n        int inRoot=inMap[root->val],left=inRoot-inStart;\n        root->left=recBuildTree(inorder,inStart,inRoot-1,postorder,postStart,postStart+left-1,inMap);\n        root->right=recBuildTree(inorder,inRoot+1,inEnd,postorder,postStart+left,postEnd-1,inMap);\n        return(root);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}