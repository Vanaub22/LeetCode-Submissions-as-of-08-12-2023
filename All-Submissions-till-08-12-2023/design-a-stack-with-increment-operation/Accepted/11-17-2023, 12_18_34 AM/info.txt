{"id":1100283848,"lang":"cpp","lang_name":"C++","time":"2 weeks, 6 days","timestamp":1700160514,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1100283848/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"21.3 MB","code":"class CustomStack {\npublic:\n    vector<int> stk;\n    int capacity,top;\n    CustomStack(int maxSize) {\n        top=-1;\n        capacity=maxSize;\n        stk=vector<int>(capacity+1,-1);\n    }\n    \n    void push(int x) {\n        if(top==capacity-1) return;\n        top++;\n        stk[top]=x;\n        cout<<endl;\n    }\n    \n    int pop() {\n        if(top==-1) return -1;\n        int popped=stk[top];\n        stk[top]=-1;\n        top--;\n        return popped;\n    }\n    \n    void increment(int k, int val) {\n        int idx=0;\n        while(idx<=k-1 && idx<=top) {\n            stk[idx]+=val;\n            idx++;\n        }\n        // cout<<\"After inc\"<<endl;\n        // for(int i=0;i<capacity;i++)\n        // cout<<stk[i]<<\" \";\n        // cout<<endl;\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */","compare_result":"1111111111111111111111111111111111","title_slug":"design-a-stack-with-increment-operation","has_notes":false,"flag_type":1}