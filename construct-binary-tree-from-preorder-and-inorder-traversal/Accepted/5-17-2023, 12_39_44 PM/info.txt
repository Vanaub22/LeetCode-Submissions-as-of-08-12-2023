{"id":951912709,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1684307384,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/951912709/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"26.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder,vector<int>& inorder) {\n        map<int,int> inMap;\n        for(int i=0;i<inorder.size();i++)\n        inMap[inorder[i]]=i;\n        int preStart=0,preEnd=preorder.size()-1,inStart=0,inEnd=preEnd;\n        return(recBuildTree(preorder,preStart,preEnd,inorder,inStart,inEnd,inMap));\n    }\n    TreeNode* recBuildTree(vector<int>& preorder,int preStart,int preEnd,vector<int>&inorder,int inStart,int inEnd,map<int,int>&inMap){\n        if(preStart>preEnd||inStart>inEnd)\n        return(NULL);\n        TreeNode* root=new TreeNode(preorder[preStart]);\n        int inRoot=inMap[root->val],left=inRoot-inStart;\n        root->left=recBuildTree(preorder,preStart+1,preStart+left,inorder,inStart,inRoot-1,inMap);\n        root->right=recBuildTree(preorder,preStart+left+1,preEnd,inorder,inRoot+1,inEnd,inMap);\n        return(root);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}