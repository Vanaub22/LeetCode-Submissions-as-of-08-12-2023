{"id":1106202183,"lang":"cpp","lang_name":"C++","time":"1 week, 4 days","timestamp":1700930019,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1106202183/","is_pending":"Not Pending","title":"Maximize Area of Square Hole in Grid","memory":"28 MB","code":"class Solution {\npublic:\n    int maximizeSquareHoleArea(int n, int m, vector<int>& hBars, vector<int>& vBars) {\n        int removableHBarCnt=hBars.size(),removableVBarCnt=vBars.size();\n        sort(hBars.begin(),hBars.end());\n        sort(vBars.begin(),vBars.end());\n        int consecutive=1,hBarsToRemove=1,vBarsToRemove=1,side=0;\n        // Finding the maximum window of consecutive removed horizontal bars\n        for(int i=1;i<removableHBarCnt;i++) {\n            if(hBars[i]==hBars[i-1]+1) consecutive++;\n            else consecutive=1;\n            hBarsToRemove=max(hBarsToRemove,consecutive);\n        }\n        consecutive=1;\n        // Finding the maximum window of consecutive removed vertical bars\n        for(int i=1;i<removableVBarCnt;i++) {\n            if(vBars[i]==vBars[i-1]+1) consecutive++;\n            else consecutive=1;\n            vBarsToRemove=max(vBarsToRemove,consecutive);\n        }\n        side=min(hBarsToRemove,vBarsToRemove)+1; // Side length for square hole\n        return side*side;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-area-of-square-hole-in-grid","has_notes":false,"flag_type":1}