{"id":1013918503,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1691334145,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/1013918503/","is_pending":"Not Pending","title":"Count Nodes Equal to Average of Subtree","memory":"11.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findSubtreeAvg(TreeNode* root){\n        return findSumOfSubtree(root)/findNodesInSubtree(root);\n    }\n    int findSumOfSubtree(TreeNode* root){\n        if(!root) return 0;\n        return root->val+findSumOfSubtree(root->left)+findSumOfSubtree(root->right);\n    }\n    int findNodesInSubtree(TreeNode* root){\n        if(!root) return 0;\n        return 1+findNodesInSubtree(root->left)+findNodesInSubtree(root->right);\n    }\n    int averageOfSubtree(TreeNode* root) {\n        if(!root) return 0;\n        if(root->val==findSubtreeAvg(root)) \n        return 1+averageOfSubtree(root->left)+averageOfSubtree(root->right);\n        return averageOfSubtree(root->left)+averageOfSubtree(root->right);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-nodes-equal-to-average-of-subtree","has_notes":false,"flag_type":1}