{"id":1086270818,"lang":"cpp","lang_name":"C++","time":"1 month, 1 week","timestamp":1698518001,"status":10,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/1086270818/","is_pending":"Not Pending","title":"Degree of an Array","memory":"25.3 MB","code":"class Solution {\npublic:\n    int findShortestSubArray(vector<int>& nums) {\n        unordered_map<int,int> freq;\n        // Finding out the frequencies for each element\n        for(int i:nums) freq[i]++;\n        int n=nums.size(),maxFreq=-1,shortestSubLength=n; // The maximum length subarray will be the array itself;\n        vector<int> modes; // To store all the elements with the same maximum frequency\n        // Finding out the elements with the maximum frequency\n        for(auto& it:freq) { \n            if(it.second>maxFreq) {\n                maxFreq=it.second;\n                modes.clear();\n                modes.push_back(it.first);\n            }\n            else if(it.second==maxFreq) modes.push_back(it.first);\n        }\n        // Finding the shortest among valid subarrays having the same degree as the actual array\n        for(int& mode:modes) {\n            int subarrayLength=findLastOccurrence(nums,mode,n)-(find(nums.begin(),nums.end(),mode)-nums.begin())+1;\n            if(subarrayLength<shortestSubLength) shortestSubLength=subarrayLength;\n        }\n        return shortestSubLength;\n    }\n    // Helper function to find out the last occurrence of an element in the array\n    int findLastOccurrence(vector<int>& nums, int x, int n) {\n        int i=n-1;\n        for(;i>=0;i--) if(nums[i]==x) return i;\n        return 0;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"degree-of-an-array","has_notes":false,"flag_type":1}