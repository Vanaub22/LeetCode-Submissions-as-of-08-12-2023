{"id":1002081346,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1690141502,"status":10,"status_display":"Accepted","runtime":"163 ms","url":"/submissions/detail/1002081346/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"63.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* createTree(vector<int>& arr, int start, int end){\n        if(start>end) return nullptr;\n        int mid=start+(end-start)/2;\n        return new TreeNode(arr[mid],createTree(arr,start,mid-1),createTree(arr,mid+1,end));\n    }\n    void inorder(TreeNode* root, vector<int>& arr){\n        if(!root) return;\n        inorder(root->left,arr);\n        arr.emplace_back(root->val);\n        inorder(root->right,arr);\n    }\n    TreeNode* balanceBST(TreeNode* root) {\n        vector<int> arr;\n        inorder(root,arr);\n        return createTree(arr,0,arr.size()-1);\n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}