{"id":1068932596,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1696628843,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1068932596/","is_pending":"Not Pending","title":"Course Schedule","memory":"13.4 MB","code":"class Solution {\npublic:\n    // Using Kahn's Algorithm and Topological Sort using BFS for Cycle Detection\n    bool canFinish(int n, vector<vector<int>>& prerequisites) {\n        vector<int> indegree(n,0);\n        vector<int> adjList[n];\n        // Calculating In-degrees and creating Adjacency List\n        for(vector<int>& prerequisite:prerequisites) {\n            adjList[prerequisite[1]].emplace_back(prerequisite[0]);\n            indegree[prerequisite[0]]++;\n        }\n        queue<int> q;\n        // Pushing in-degree = 0 vertices into queue\n        for(int i=0;i<n;i++) if(indegree[i]==0) q.push(i);\n        int count=0; // to keep a count of vertices in Topological Sort\n        // Performing BFS\n        while(!q.empty()) {\n            int node=q.front();\n            count++;\n            q.pop();\n            for(int i:adjList[node]) {\n                indegree[i]--;\n                if(indegree[i]==0) q.push(i);\n            }   \n        }\n        // checking if the Topological Sort was successful, i.e. if it was DAG\n        return count==n;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"course-schedule","has_notes":false,"flag_type":1}