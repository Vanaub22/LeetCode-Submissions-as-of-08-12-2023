{"id":1097071667,"lang":"cpp","lang_name":"C++","time":"3 weeks, 4 days","timestamp":1699768409,"status":10,"status_display":"Accepted","runtime":"178 ms","url":"/submissions/detail/1097071667/","is_pending":"Not Pending","title":"Maximum Frequency Stack","memory":"91.8 MB","code":"class FreqStack {\npublic:\n    unordered_map<int,int> freq;\n    vector<vector<int>> entries;\n    void push(int val) {\n        freq[val]++;\n        if(entries.size()>=freq[val]) entries[freq[val]-1].push_back(val);\n        else entries.push_back({val}); // This is the highest frequency entry\n    }\n    \n    int pop() {\n        int popVal=entries.back().back();\n        entries.back().pop_back(); // Removing the element with the highest frequency\n        freq[popVal]--;\n        if(entries.back().size()==0) entries.pop_back(); // The last entry is empty\n        return popVal;\n    }\n};\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack* obj = new FreqStack();\n * obj->push(val);\n * int param_2 = obj->pop();\n */","compare_result":"11111111111111111111111111111111111111","title_slug":"maximum-frequency-stack","has_notes":false,"flag_type":1}