{"id":1091262671,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1699101805,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1091262671/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // To determine the condition of the main tree after deletions (Pruning)\n    void pruneMainTree(TreeNode*& root,set<int>& to_delete) {\n        if(!root) return;\n        if(root->left && to_delete.find(root->left->val)!=to_delete.end()) root->left=nullptr;\n        if(root->right && to_delete.find(root->right->val)!=to_delete.end()) root->right=nullptr;\n        pruneMainTree(root->left,to_delete);\n        pruneMainTree(root->right,to_delete);\n    }\n    // To find trees apart from the main tree that have been formed as a result of the deletions\n    void findMoreTrees(TreeNode* root, set<int>& to_delete, vector<TreeNode*>& forest) {\n        if(!root) return;\n        if(to_delete.find(root->val)!=to_delete.end()) {\n            if(root->left) forest.push_back(root->left);\n            if(root->right) forest.push_back(root->right);\n        }\n        findMoreTrees(root->left,to_delete,forest);\n        findMoreTrees(root->right,to_delete,forest);\n    }\n    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& values) {\n        set<int> to_delete; // Using a Set For O(1) access to values that are to be deleted\n        for(int value:values) to_delete.insert(value);\n        vector<TreeNode*> forest;\n        findMoreTrees(root,to_delete,forest);\n        // If the root node is deleted then there's no need to prune the main tree because it doesn't exist anymore\n        if(to_delete.find(root->val)==to_delete.end()) {\n            pruneMainTree(root,to_delete);\n            forest.push_back(root); // Pushing in the pruned main tree\n        }\n        return forest;\n    }\n};","compare_result":"111001000100000010100001100111010001110000100110000011010010000011000110000011010101101000000000000000000000000","title_slug":"delete-nodes-and-return-forest","has_notes":false,"flag_type":1}