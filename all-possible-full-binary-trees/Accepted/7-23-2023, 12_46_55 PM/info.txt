{"id":1001621712,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1690096615,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/1001621712/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"28 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int,vector<TreeNode*>> fbtMap;\n    vector<TreeNode*> allPossibleFBT(int n) {\n        if(n%2==0) return {};\n        if(n==1) return {new TreeNode()};\n        if(fbtMap.find(n)!=fbtMap.end()) return fbtMap[n];\n        vector<TreeNode*> fbtRootList;\n        for(int i=1;i<n;i+=2){\n            vector<TreeNode*> leftSide=allPossibleFBT(i),rightSide=allPossibleFBT(n-i-1);\n            for(TreeNode* leftSubTree:leftSide)\n            for(TreeNode* rightSubTree:rightSide)\n            fbtRootList.push_back(new TreeNode(0,leftSubTree,rightSubTree));\n        }\n        fbtMap[n]=fbtRootList;\n        return fbtRootList;\n    }\n};","compare_result":"11111111111111111111","title_slug":"all-possible-full-binary-trees","has_notes":false,"flag_type":1}