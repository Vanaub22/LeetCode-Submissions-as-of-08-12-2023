{"id":1050699175,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1694851265,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1050699175/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"class MyCircularQueue {\npublic:\n    int *q,n,front,rear,size;\n    MyCircularQueue(int k) {\n        n=k;\n        front=rear=-1;\n        size=0;\n        q=new int[n];\n    }\n    bool enQueue(int value) {\n        if(front==-1 && rear==-1){\n            front=rear=0;\n            q[rear]=value;\n            size++;\n            return true;\n        }\n        else if((rear+1)%n!=front){\n            rear=(rear+1)%n;\n            q[rear]=value;\n            size++;\n            return true;\n        }\n        else return false;\n    }\n    bool deQueue() {\n        if(front==-1) return false;\n        else if(front==rear){\n            front=rear=-1;\n        }\n        else front=(front+1)%size;\n        return true;\n    }\n    int Front() {\n        return isEmpty()?-1:q[front];\n    }\n    int Rear() {\n        return isEmpty()?-1:q[rear];\n    }\n    bool isEmpty() {\n        return front==-1 && rear==-1;\n    }\n    bool isFull() {\n        return (rear+1)%size==front;\n    }\n};\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"1111000000000000000000000000000000000000000000000000000000","title_slug":"design-circular-queue","has_notes":false,"flag_type":1}