{"id":1004860899,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1690410346,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1004860899/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Postorder Traversal","memory":"25.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {\n        int n=preorder.size();\n        unordered_map<int,int> post_idx;\n        for(int i=0;i<n;i++) post_idx[postorder[i]]=i;\n        return constructRecursive(post_idx,preorder,postorder,0,n-1,0,n-1);\n    }\n    TreeNode* constructRecursive(unordered_map<int,int>& post_idx, vector<int>& preorder, vector<int>& postorder, int preStart, int preEnd, int postStart, int postEnd){\n        TreeNode* root=new TreeNode(preorder[preStart]);\n        if(preStart==preEnd) return root;\n        int idx=post_idx[preorder[preStart+1]], leftSubLength=idx-postStart+1; \n        root->left=constructRecursive(post_idx,preorder,postorder,preStart+1,preStart+leftSubLength,postStart,idx);\n        if(idx==postEnd-1) return root;\n        root->right=constructRecursive(post_idx,preorder,postorder,preStart+leftSubLength+1,preEnd,idx+1,postEnd-1);\n        return root;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-postorder-traversal","has_notes":false,"flag_type":1}