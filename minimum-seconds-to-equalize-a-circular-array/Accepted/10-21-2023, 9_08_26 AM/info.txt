{"id":1080318551,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697859506,"status":10,"status_display":"Accepted","runtime":"344 ms","url":"/submissions/detail/1080318551/","is_pending":"Not Pending","title":"Minimum Seconds to Equalize a Circular Array","memory":"147.7 MB","code":"class Solution {\npublic:\n    int minimumSeconds(vector<int>& nums) {\n        // Essentially what happens here is replacement, the final element lies within the array\n        // Optimally, in each second, this chosen number will expand left and right from its index\n        // Array will be equalized when the maximum gap between 2 occurrences of x is filled with x\n        int n=nums.size();\n        unordered_map<int,vector<int>> occurrences;\n        for(int i=0;i<n;i++) occurrences[nums[i]].emplace_back(i);\n        // The list of occurrences for each element will always appear in sorted fashion\n        // Now we have to find the differences in indices\n        vector<int> maxDifferences;\n        for(int i=0;i<n;i++) maxDifferences.emplace_back(findMaxDiff(occurrences[nums[i]],n));\n        return *min_element(maxDifferences.begin(),maxDifferences.end())/2;\n    }\n    int findMaxDiff(vector<int>& occ, int L) {\n        int n=occ.size(),maxDiff=0,prev=occ[n-1]-L; // Gap between the first and last occurrence\n        for(int idx:occ) {\n            maxDiff=max(maxDiff,idx-prev);\n            prev=idx;\n        }\n        return maxDiff;\n    }\n};","compare_resulttitle_slug":"minimum-seconds-to-equalize-a-circular-array","has_notes":false,"flag_type":1}