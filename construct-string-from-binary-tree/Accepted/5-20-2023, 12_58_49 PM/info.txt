{"id":953767669,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1684567729,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/953767669/","is_pending":"Not Pending","title":"Construct String from Binary Tree","memory":"54 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    string tree2str(TreeNode* root) {\n        string str=\"\";\n        if(!root)\n        return(\"\");\n        str+=to_string(root->val);\n        if(root->left)\n        str+=(\"(\"+tree2str(root->left)+\")\");\n        if(!root->left && root->right)\n        str+=\"()\"; // to maintain the one-to-one mapping b/w i/p and o/p\n        if(root->right)\n        str+=(\"(\"+tree2str(root->right)+\")\");\n        return(str);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-string-from-binary-tree","has_notes":false,"flag_type":1}