{"id":962128435,"lang":"cpp","lang_name":"C++","time":"6 months, 1 week","timestamp":1685686310,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/962128435/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"25.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void dfs(TreeNode* root,unordered_map<int,int>& umap){\n        if(!root)\n        return;\n        umap[root->val]++;\n        dfs(root->left,umap);\n        dfs(root->right,umap);\n    }\n    vector<int> findMode(TreeNode* root) {\n        unordered_map<int,int> umap;\n        dfs(root,umap);\n        vector<int> modes;\n        int max_freq=INT_MIN;\n        for(auto it:umap)\n        if(it.second>=max_freq){\n            if(it.second>max_freq){\n                max_freq=it.second;\n                modes.clear();\n            }\n            modes.push_back(it.first);\n        }\n        return(modes);\n    }\n};","compare_result":"11111111111111111111111","title_slug":"find-mode-in-binary-search-tree","has_notes":false,"flag_type":1}