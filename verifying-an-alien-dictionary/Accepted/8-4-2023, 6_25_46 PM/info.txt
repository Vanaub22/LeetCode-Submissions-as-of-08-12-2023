{"id":1012056674,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1691153746,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1012056674/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"9.7 MB","code":"class Solution {\npublic:\n    bool inOrderLexCodes(string& a, string& b, unordered_map<char,int>& order){\n        int n=min(a.size(),b.size());\n        for(int i=0;i<n;i++) \n        if(order[a[i]]>order[b[i]]) return false;\n        else if(order[a[i]]<order[b[i]]) return true;\n        return a.size()<=b.size();\n    }\n    bool isAlienSorted(vector<string>& words, string dictionary) {\n        unordered_map<char,int> order;\n        int n=dictionary.length();\n        for(int i=0;i<n;i++) order[dictionary[i]]=i;\n        n=words.size();\n        for(int i=0;i<n-1;i++) if(!inOrderLexCodes(words[i],words[i+1],order)) return false;\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary","has_notes":false,"flag_type":1}