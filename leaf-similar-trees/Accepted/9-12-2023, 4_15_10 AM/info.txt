{"id":1046945931,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1694472310,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1046945931/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"13 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void findLeafSequence_dfs(TreeNode* root, vector<int>& leafSequence){\n        if(!root) return;\n        if(!root->left && !root->right) leafSequence.push_back(root->val);\n        findLeafSequence_dfs(root->left,leafSequence);\n        findLeafSequence_dfs(root->right,leafSequence);\n    }\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        vector<int> ls1,ls2;\n        findLeafSequence_dfs(root1,ls1);\n        findLeafSequence_dfs(root2,ls2);\n        return ls1==ls2;\n    }\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}