{"id":1079749267,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697784740,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1079749267/","is_pending":"Not Pending","title":"Beautiful Arrangement","memory":"6.2 MB","code":"class Solution {\npublic:\n    // All the solutions need to be discovered, therefore, Backtracking would be preferred\n    void backtrackingPermute(int pos, bool considered[], int& solutions, int n) {\n        if(pos>n) {\n            solutions++; // Another solution has been obtained\n            return;\n        }\n        for(int i=1;i<=n;i++) {\n            if(!considered[i] && (pos%i==0 || i%pos==0)) {\n                considered[i]=true;\n                backtrackingPermute(pos+1,considered,solutions,n);\n                considered[i]=false; // Backtracking\n            }\n        }\n    }\n    int countArrangement(int n) {\n        int solutions=0;\n        bool considered[n+1]; // 1-indexed, to keep a track of integers that have been considered\n        memset(considered,false,sizeof(considered));\n        backtrackingPermute(1,considered,solutions,n);\n        return solutions;\n    }\n};","compare_result":"111111111111111","title_slug":"beautiful-arrangement","has_notes":false,"flag_type":1}