{"id":1109246827,"lang":"cpp","lang_name":"C++","time":"1Â week","timestamp":1701308673,"status":10,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/1109246827/","is_pending":"Not Pending","title":"Insert Delete GetRandom O(1)","memory":"97.6 MB","code":"class RandomizedSet {\npublic:\n    // We would need to involve a vector just for the getRandom function\n    // Insertion, Lookup, Deletion etc. in O(1) could have been done using map only\n    vector<int> v;\n    unordered_map<int,int> umap;\n\n    bool insert(int val) {\n        if(umap.find(val)!=umap.end()) return false;\n        v.emplace_back(val);\n        umap[val]=v.size()-1;\n        return true;\n    }\n    \n    bool remove(int val) {\n        if(umap.find(val)==umap.end()) return false;\n        // We will be swapping the element to be removed with the last element\n        int last_element=v.back();\n        umap[last_element]=umap[val];\n        v[umap[val]]=last_element;\n        v.pop_back(); // Using pop_back() achieves O(1)\n        umap.erase(val); // Removing the key from the map\n        return true;\n    }\n    \n    int getRandom() {\n        return v[rand()%v.size()];\n    }\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet* obj = new RandomizedSet();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */","compare_result":"1111111111111111111","title_slug":"insert-delete-getrandom-o1","has_notes":false,"flag_type":1}