{"id":945714654,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1683412351,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/945714654/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findHeight(TreeNode* root){\n        return(root?1+max(findHeight(root->left),findHeight(root->right)):0);\n    }\n    bool isBalanced(TreeNode* root) {\n        if(!root)\n        return(true);\n        int leftHeight=findHeight(root->left),rightHeight=findHeight(root->right);\n        if(abs(leftHeight-rightHeight)>1)\n        return(false);\n        return(true);\n    }\n};","compare_result":"111111111111011011110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110010000100000011000011111111111111111111111111111111111111111111111111111111111111111000001111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}