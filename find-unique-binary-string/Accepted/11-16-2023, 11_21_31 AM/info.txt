{"id":1099870218,"lang":"cpp","lang_name":"C++","time":"3Â weeks","timestamp":1700113891,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1099870218/","is_pending":"Not Pending","title":"Find Unique Binary String","memory":"10.9 MB","code":"class Solution {\npublic:\n    // Constraints are small enough for Brute Force\n    string findDifferentBinaryString(vector<string>& nums) {\n        set<string> binSet;\n        for(string num:nums) binSet.insert(num);\n        int n=nums[0].length(),maxRep=pow(2,n);\n        cout<<\"maxrep=\"<<maxRep<<endl;\n        // Strings are of length n (n-bit), therefore, maximum number that can be represented is 2^n\n        for(int i=0;i<=maxRep;i++) {\n            string bin=i>0?createBinaryString(i):string(n,'0');\n            if(bin.length()<n) bin=string(n-bin.length(),'0')+bin; // Adding leading Zeroes (To make length = n)\n            if(binSet.find(bin)==binSet.end()) return bin; \n        }\n        return \"\";\n    }\n    string createBinaryString(int num) {\n        string bin=\"\";\n        while(num>0) {\n            cout<<\"num val=\"<<num<<endl;\n            bin+=to_string(num%2);\n            cout<<\"bin val=\"<<bin<<endl;\n            num/=2;\n            cout<<\"num val=\"<<num<<endl;\n        }\n        reverse(bin.begin(),bin.end());\n        return bin;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-unique-binary-string","has_notes":false,"flag_type":1}