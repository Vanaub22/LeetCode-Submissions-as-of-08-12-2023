{"id":953714769,"lang":"cpp","lang_name":"C++","time":"6 months, 3 weeks","timestamp":1684560489,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/953714769/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    int ptr=-1;\n    vector<int> traversal;\n    BSTIterator(TreeNode* root) {\n        inorder(root);\n    }  \n    void inorder(TreeNode* root){\n        if(root==NULL)\n        return;\n        inorder(root->left);\n        traversal.push_back(root->val);\n        inorder(root->right);\n    }  \n    int next() {\n        ptr++;\n        return(traversal[ptr]);\n    }    \n    bool hasNext() {\n        return(ptr+1<traversal.size());\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}