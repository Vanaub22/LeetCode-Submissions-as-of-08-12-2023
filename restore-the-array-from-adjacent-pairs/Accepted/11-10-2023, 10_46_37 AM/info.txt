{"id":1095706960,"lang":"cpp","lang_name":"C++","time":"3 weeks, 6 days","timestamp":1699593397,"status":10,"status_display":"Accepted","runtime":"305 ms","url":"/submissions/detail/1095706960/","is_pending":"Not Pending","title":"Restore the Array From Adjacent Pairs","memory":"106 MB","code":"class Solution {\npublic:\n    // Using Iterative Approach, following Trail\n    vector<int> restoreArray(vector<vector<int>>& adjPairs) {\n        int n=adjPairs.size(),start,curr,curr_idx=0,prev;\n        // Generating Adjacency List\n        unordered_map<int,vector<int>> adjList;\n        for(auto& edge:adjPairs) {\n            adjList[edge[0]].emplace_back(edge[1]);\n            adjList[edge[1]].emplace_back(edge[0]);\n        }\n        // Finding the first element\n        for(auto& it:adjList) if(it.second.size()==1) {\n            start=curr=it.first;\n            break;\n        }\n        vector<int> arr={start}; // To store the restored array\n        // Reconstructing the array\n        while(curr_idx<n) {\n            if(adjList[curr][0]!=prev) arr.emplace_back(adjList[curr][0]);\n            else arr.emplace_back(adjList[curr][1]);\n            prev=curr;\n            curr_idx++;\n            curr=arr[curr_idx];\n        }\n        return arr;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"restore-the-array-from-adjacent-pairs","has_notes":false,"flag_type":1}