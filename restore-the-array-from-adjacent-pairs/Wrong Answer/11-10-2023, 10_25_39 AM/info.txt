{"id":1095696347,"lang":"cpp","lang_name":"C++","time":"3 weeks, 6 days","timestamp":1699592139,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1095696347/","is_pending":"Not Pending","title":"Restore the Array From Adjacent Pairs","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> restoreArray(vector<vector<int>>& adjPairs) {\n        int n=adjPairs.size(),start=0,curr=0,curr_idx=0;\n        // Using Iterative Approach, following Trail\n        // Generating Adjacency List\n        unordered_map<int,vector<int>> adjList;\n        for(auto& edge:adjPairs) {\n            adjList[edge[0]].emplace_back(edge[1]);\n            adjList[edge[1]].emplace_back(edge[0]);\n        }\n        // Finding the 0th element\n        for(auto& it:adjList) if(it.second.size()==1) {\n            start=curr=it.first;\n            break;\n        }\n        vector<int> arr={start};\n        while(curr_idx<n) {\n            if(curr_idx==0 || curr_idx==n-1) arr.emplace_back(adjList[curr][0]); // Only 1 neighbour\n            else arr.emplace_back(adjList[curr][0]==arr[curr_idx-1]?adjList[curr][1]:adjList[curr][0]);\n            curr_idx++;\n            curr=arr[curr_idx];\n        }\n        return arr;\n    }\n};","compare_result":"1111110100111110110011111110010010100100110101","title_slug":"restore-the-array-from-adjacent-pairs","has_notes":false,"flag_type":1}