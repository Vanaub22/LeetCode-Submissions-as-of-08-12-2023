{"id":1114033626,"lang":"java","lang_name":"Java","time":"13 hours, 19 minutes","timestamp":1701917960,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1114033626/","is_pending":"Not Pending","title":"Number of Zero-Filled Subarrays","memory":"N/A","code":"class Solution {\n    public long zeroFilledSubarray(int[] nums) {\n        // Trying to find out the total number of subarrays within each subarray...\n        // eg. [0,0,0,0] => [0],[0],[0],[0],[0,0],[0,0],[0,0],[0,0,0],[0,0,0],[0,0,0,0]\n        // A 0-filled subarray of length 4 has 10 valid 0-filled subarrays within it\n        // 4 of length = 1, 3 of length = 2, 2 of length = 3 and 1 of length = 4\n        // Therefore, every subarray of length n eill similarly have:\n        // n of length = 1, n-1 of length = 2 ... 2 of length = n - 1 and 1 of length = n\n        // Total = n + (n - 1) + (n - 2) + (n - 3) + ... + 2 + 1 = n (n + 1) / 2\n        long subarrays=0;\n        int start=0,end=0,n=nums.length;\n        boolean flag=false; // To denote if we are currently in a 0-filled subarray\n        for(int i=0;i<n;i++) {\n            if(nums[i]==0) {\n                if(!flag) {\n                    flag=true;\n                    start=i;\n                }\n                else end=i;\n            }\n            else {\n                if(flag) {\n                    int l=end-start+1;\n                    subarrays+=l*(l+1)/2;\n                    flag=false;\n                }\n            }\n        }\n        // If the array ends in a 0-filled subarray\n        if(flag) {\n            int l=end-start+1;\n            subarrays+=l*(l+1)/2;\n        }\n        return subarrays;\n    }\n}","compare_result":"111111111011001101001000110100000001000001011100","title_slug":"number-of-zero-filled-subarrays","has_notes":false,"flag_type":1}