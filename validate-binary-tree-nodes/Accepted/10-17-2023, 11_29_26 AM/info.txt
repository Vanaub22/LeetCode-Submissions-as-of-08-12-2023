{"id":1077280324,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1697522366,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1077280324/","is_pending":"Not Pending","title":"Validate Binary Tree Nodes","memory":"31.7 MB","code":"class Solution {\npublic:\n    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {\n        int parent[n],root_count=0,node=0;\n        memset(parent,-1,sizeof(parent));\n        // Valid Nodes can have only 1 Parent\n        for(int i=0;i<n;i++) {\n            if(leftChild[i]!=-1) {\n                if(parent[leftChild[i]]!=-1 || parent[i]==leftChild[i]) return false;\n                else parent[leftChild[i]]=i;\n            }\n            if(rightChild[i]!=-1) {\n                if(parent[rightChild[i]]!=-1 || parent[i]==rightChild[i]) return false;\n                else parent[rightChild[i]]=i;\n            }\n        }\n        // Number of Nodes with No Parent, i.e., Root Node, should only be 1 \n        for(int i=0;i<n;i++) if(parent[i]==-1) root_count++;\n        if(root_count!=1) return false;\n        // Checking for Existence of Loops\n        while(parent[node]!=0) {\n            if(parent[node]==-1) return true;\n            node=parent[node];\n        }\n        return false;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"validate-binary-tree-nodes","has_notes":false,"flag_type":1}