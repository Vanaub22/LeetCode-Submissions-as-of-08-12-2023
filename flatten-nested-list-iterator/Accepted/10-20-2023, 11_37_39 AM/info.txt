{"id":1079723684,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1697782059,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1079723684/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"14.8 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\nclass NestedIterator {\nprivate:\n    // Will Flatten Recursively\n    vector<int> flattened;\n    int idx=0; // Initially Pointer is placed at 0\n    // Will be using the implementations mentioned in the comments for easy processing\n    void flatten(vector<NestedInteger> &nestedList) {\n        for(auto item:nestedList)\n        if(item.isInteger()) flattened.emplace_back(item.getInteger());\n        else flatten(item.getList());\n    }\npublic:\n    NestedIterator(vector<NestedInteger> &nestedList) { flatten(nestedList); }\n    int next() { return(flattened[idx++]); }\n    bool hasNext() { return idx<flattened.size(); }\n};\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */","compare_result":"1111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator","has_notes":false,"flag_type":1}