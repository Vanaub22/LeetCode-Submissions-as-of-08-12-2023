{"id":1067353784,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1696475829,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1067353784/","is_pending":"Not Pending","title":"Majority Element II","memory":"16.1 MB","code":"class Solution {\npublic:\n    // Original HashMap Solution will take up additonal space\n    // Boyer-Moore's Voting Algorithm reduces this to O(N) time and O(1) Space\n    vector<int> majorityElement(vector<int>& nums) {\n        vector<int> majority_elements;\n        // At most two elements can have frequency more than floor(n/3)\n        int cnt1=0,cnt2=0,el1=INT_MIN,el2=INT_MIN,majority_cnt=floor(nums.size()/3);\n        // Finding out the 2 majority elements in the array \n        for(int i:nums) {\n            if(cnt1==0 && el2!=i) {\n                cnt1=1;\n                el1=i;\n            }\n            else if(cnt2==0 && el1!=i) {\n                cnt2=1;\n                el2=i;\n            }\n            else if(el1==i) cnt1++;\n            else if(el2==i) cnt2++;\n            else {\n                cnt1--;\n                cnt2--;\n            }\n        }\n        // Finding out the individual frequencies of the majority elements\n        cnt1=cnt2=0; \n        for(int i:nums) if(i==el1) cnt1++; \n        else if(i==el2) cnt2++;\n        if(cnt1>majority_cnt) majority_elements.emplace_back(el1);\n        if(cnt2>majority_cnt) majority_elements.emplace_back(el2);\n        return majority_elements;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"majority-element-ii","has_notes":false,"flag_type":1}