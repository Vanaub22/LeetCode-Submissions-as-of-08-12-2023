{"id":1069280867,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1696677867,"status":10,"status_display":"Accepted","runtime":"135 ms","url":"/submissions/detail/1069280867/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"54.5 MB","code":"class Solution {\npublic:\n    void dfs(int start, bool visited[], vector<int> adj[]) {\n        visited[start]=true;\n        for(int node:adj[start]) if(!visited[node]) dfs(node,visited,adj);\n    }\n    int makeConnected(int n, vector<vector<int>>& connections) {\n        // n computers cannot be connected with less than n-1 connection lines\n        if(connections.size()<n-1) return -1;\n        // Create the Adjacency List\n        vector<int> adj[n];\n        for(auto connection:connections) {\n            // Undirected Graph => Connections will be made on both ends\n            adj[connection[0]].emplace_back(connection[1]);\n            adj[connection[1]].emplace_back(connection[0]); \n        }\n        bool visited[n];\n        fill(visited,visited+n,false);\n        // Find the number of components using DFS\n        int components=0;\n        for(int i=0;i<n;i++) {\n            if(!visited[i]) {\n                dfs(i,visited,adj);\n                components++; // counting the number of components\n            }\n        }\n        return components-1;\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected","has_notes":false,"flag_type":1}