{"id":1069278264,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1696677557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1069278264/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"N/A","code":"class Solution {\npublic:\n    void dfs(int start, bool visited[], vector<int> adj[]) {\n        visited[start]=true;\n        for(int node:adj[start]) \n        if(!visited[node]) dfs(node,visited,adj);\n    }\n    int makeConnected(int V, vector<vector<int>>& connections) {\n        // V computers cannot be connected with less than V-1 cpnnection lines\n        int n=connections.size();\n        if(n<V-1) return -1;\n        // Create the Adjacency List\n        vector<int> adj[V];\n        for(auto connection:connections) {\n            // Undirected Graph => Connections will be made on both ends\n            adj[connection[0]].emplace_back(connection[1]);\n            adj[connection[1]].emplace_back(connection[0]); \n        }\n        bool visited[V];\n        fill(visited,visited+V,false);\n        // Find the number of components using DFS\n        int components=0;\n        for(int i=0;i<V;i++) {\n            if(!visited[i]) {\n                dfs(0,visited,adj);\n                components++; // counting the number of components\n            }\n        }\n        return components-1;\n    }\n};","compare_result":"111111111111111111111111000000000000","title_slug":"number-of-operations-to-make-network-connected","has_notes":false,"flag_type":1}