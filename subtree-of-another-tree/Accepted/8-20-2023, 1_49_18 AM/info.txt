{"id":1026116311,"lang":"cpp","lang_name":"C++","time":"3 months, 2 weeks","timestamp":1692476358,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1026116311/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"28.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool checkSameTree(TreeNode* root_a, TreeNode* root_b){\n        if(!root_a && !root_b) return true;\n        if(!root_a || !root_b) return false;\n        if(root_a->val!=root_b->val) return false;\n        return checkSameTree(root_a->left,root_b->left) && checkSameTree(root_a->right,root_b->right); \n    }\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        if(!root || !subRoot) return false;\n        if(checkSameTree(root,subRoot)) return true;\n        return isSubtree(root->left,subRoot) || isSubtree(root->right,subRoot);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}