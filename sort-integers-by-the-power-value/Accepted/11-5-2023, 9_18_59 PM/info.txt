{"id":1092126406,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1699199339,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/1092126406/","is_pending":"Not Pending","title":"Sort Integers by The Power Value","memory":"14.1 MB","code":"class Solution {\npublic:\n    // Seeing the low constraints, we can easily go for Simulation and Custom Sorting \n    int getKth(int lo, int hi, int k) {\n        vector<int> range;\n        unordered_map<int,int> powVal; // For O(1) Access to Power Values\n        for(int i=lo;i<=hi;i++) {\n            range.emplace_back(i);\n            powVal[i]=determinePowVal(i);\n        }\n        sort(range.begin(),range.end(),[&](int& a, int &b) {\n            return customOrder(a,b,powVal);\n        });\n        return range[k-1]; // k is 1-indexed\n    }\n    // Custom Sorting Comparator Function\n    static int customOrder(int a, int b, unordered_map<int,int>& powVal) {\n        return powVal[a]==powVal[b]?a<b:powVal[a]<powVal[b];\n    }\n    // Helper function to determine Power Value iteratively\n    int determinePowVal(int x) {\n        int steps=0;\n        while(x!=1) {\n            steps++;\n            x=x%2==1?3*x+1:x/2;\n        }\n        return steps;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-integers-by-the-power-value","has_notes":false,"flag_type":1}