{"id":1113298150,"lang":"cpp","lang_name":"C++","time":"1 day, 13 hours","timestamp":1701829551,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1113298150/","is_pending":"Not Pending","title":"The k-th Lexicographical String of All Happy Strings of Length n","memory":"8.5 MB","code":"class Solution {\npublic:\n    string getHappyString(int n, int k) {\n        // An ordered set of characters ensures that lexicographical order is maintained\n        // The charSet iteration in the backtracking fn. eliminates the need for sorting \n        string charSet=\"abc\",s=\"\";\n        vector<string> happyStrings;\n        backtrack_gen(s,charSet,happyStrings,n,k);\n        return happyStrings.size()==k?happyStrings[k-1]:\"\";\n    }\n    void backtrack_gen(string& s, string charSet, vector<string>& hs, int n, int& k) {\n        if(hs.size()==k) return;\n        if(s.length()==n) {\n            hs.emplace_back(s);\n            return;\n        }\n        for(int i=0;i<3;i++) {\n            if(s.length()==0 || s.back()!=charSet[i]) {\n                s+=charSet[i];\n                backtrack_gen(s,charSet,hs,n,k);\n                s.pop_back();\n            }\n        }\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-k-th-lexicographical-string-of-all-happy-strings-of-length-n","has_notes":false,"flag_type":1}