{"id":1050384349,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1694807130,"status":10,"status_display":"Accepted","runtime":"165 ms","url":"/submissions/detail/1050384349/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"130.8 MB","code":"class Solution {\npublic:\n    int findDistance(vector<int>& a, vector<int>& b){\n        return abs(a[0]-b[0])+abs(a[1]-b[1]);\n    }\n    vector<vector<pair<int,int>>> createAdjacencyList(vector<vector<int>>& points){\n        int V=points.size();\n        vector<vector<pair<int,int>>> adjacencyList(V);\n        for(int i=0;i<V-1;i++)\n        for(int j=i+1;j<V;j++){\n            int weight=findDistance(points[i],points[j]);\n            adjacencyList[i].push_back({weight,j});\n            adjacencyList[j].push_back({weight,i});                                \n        }\n        return adjacencyList;\n    }\n    int minCostConnectPoints(vector<vector<int>>& points) {\n        vector<vector<pair<int,int>>> adjacencyList=createAdjacencyList(points);\n        int V=points.size(),cost=0,edges=0;\n        vector<bool> visited(V,false);\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;\n        pq.push({0,0});\n        while(!pq.empty()){\n            int weight=pq.top().first,vertex=pq.top().second;\n            pq.pop();\n            if(visited[vertex]) continue;\n            visited[vertex]=true;\n            cost+=weight;\n            edges++;\n            if(edges==V) return cost;\n            for(pair<int,int>& neighbour:adjacencyList[vertex])\n            if(!visited[neighbour.second]) pq.push(neighbour);\n        }\n        return cost;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false,"flag_type":1}