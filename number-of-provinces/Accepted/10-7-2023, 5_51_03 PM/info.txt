{"id":1069308263,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1696681263,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1069308263/","is_pending":"Not Pending","title":"Number of Provinces","memory":"17.3 MB","code":"class Solution {\npublic:\n    void dfs(int start, bool visited[], vector<int> adj[]) {\n        visited[start]=true;\n        for(int i:adj[start]) if(!visited[i]) dfs(i,visited,adj);\n    }\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        int n=isConnected.size(),provinces=0;\n        vector<int> adj[n];\n        bool visited[n];\n        memset(visited,false,sizeof(visited));\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<n;j++) {\n                if(isConnected[i][j]) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        for(int i=0;i<n;i++) {\n            if(!visited[i]) {\n                dfs(i,visited,adj);\n                provinces++;\n            }\n        }\n        return provinces;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}