{"id":930155079,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1680961488,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/930155079/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\n// Floyd's Cycle-finding Algorithm (Hare and Tortoise Algorithm)\n// using fast and slow pointers to traverse the list\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *slow=head,*fast=head;\n        while(fast && fast->next){\n            slow=slow->next;\n            fast=fast->next->next;\n            if(slow==fast)\n            return(true);\n        }\n        return(false);\n    }\n};","compare_result":"11111111111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}