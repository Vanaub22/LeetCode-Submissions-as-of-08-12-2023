{"id":930152145,"lang":"cpp","lang_name":"C++","time":"8Â months","timestamp":1680961035,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/930152145/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if(head==NULL || head->next==NULL || head->next->next==NULL)\n        return(false);\n        if(head->next==head)\n        return(true);\n        ListNode *slow=head,*fast=head->next;\n        while(fast!=NULL){\n            if(slow!=fast){\n                slow=slow->next;\n                fast=fast->next->next;\n            }\n            else\n            return(true);\n        }\n        return(false);\n    }\n};","compare_result":"11111111110000000000000","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}